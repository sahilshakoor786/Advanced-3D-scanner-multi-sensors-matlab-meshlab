// Authored by Sahil Shakoor, Final Mechanical Engineering Student, HBTI Kanpur
//Advanced 3D Scanner code 
//Final Year Project
//Group 18
// --------------------------------------------------------------------------------
#include <SPI.h>
#include <SD.h>

// SD card
const int csPin      = 10;  // SD CS pin

// IR sensor
const int irPin      = A3;

// Turntable (theta) motor
const int tStep   = 2, tDir   = 3, tMS1  = 4, tMS2  = 5, tEn   = 6;

// Z-axis motor
const int zStep   = 7, zDir   = 8, zMS1  = 9, zMS2  = A2, zEn   = A1;

// Ultrasonic 1 stepper
const int u1Step  = 22, u1Dir  = 23, u1MS1 = 24, u1MS2 = 25, u1En  = 26;
const int u1Trig  = 28, u1Echo = 29;

// Ultrasonic 2 stepper
const int u2Step  = 30, u2Dir  = 31, u2MS1 = 32, u2MS2 = 33, u2En  = 34;
const int u2Trig  = 36, u2Echo = 37;

// Scan parameters
const int thetaCounts   = 200;
const int noZSteps      = 20;
const float maxDist     = 20.0;
const float tol         = 0.1;
const float zSpacing    = 0.2;
const float stepAngle   = (2*PI)/thetaCounts;

// Initialization lift: 10 cm
const int initZcm       = 10;
const int stepsPerCm    = noZSteps / zSpacing;  // 20 / 0.2 = 100 steps/cm
const int initZSteps    = initZcm * stepsPerCm; // 1000 steps for 10 cm

// Track layers
int layerCount = 0;

// SD file handle
File dataFile;

// --------------------------------------------------------------------------------
// Helper functions (Authored by Sahil Shakoor)
// --------------------------------------------------------------------------------
// Basic stepper pulse (full-step)
void pulseStepper(int stepPin, unsigned long delayUs) {
  digitalWrite(stepPin, LOW);
  delayMicroseconds(delayUs);
  digitalWrite(stepPin, HIGH);
  delayMicroseconds(delayUs);
}

// Rotate any stepper N steps at default speed
void rotateMotor(int stepPin, int steps) {
  // Sahil Shakoor: default speed rotation
  for (int i = 0; i < steps; i++) {
    pulseStepper(stepPin, 1000);
  }
}

// Fast rotate for initialization (Authored by Sahil Shakoor)
void rotateMotorFast(int stepPin, int steps) {
  // High-speed pulses for init movement
  for (int i = 0; i < steps; i++) {
    pulseStepper(stepPin, 200);
  }
}

// IR median read (by Sahil Shakoor)
double readIRMedian() {
  const int N = 5;
  int s[N];
  for(int i=0; i<N; i++) { s[i] = analogRead(irPin); delayMicroseconds(500); }
  // Sort and take median
  for(int i=0; i<N-1; i++) for(int j=i+1; j<N; j++)
    if (s[j] < s[i]) { int t = s[i]; s[i] = s[j]; s[j] = t; }
  int med = s[N/2];
  double V = (double)med * 5.0 / 1023.0;
  double d = -5.40274*pow(V,3) + 28.4823*pow(V,2) - 49.7115*V + 31.3444;
  return min(d, maxDist);
}

// Ultrasonic ping read (Sahil Shakoor)
double readUltrasonic(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long dur = pulseIn(echoPin, HIGH, 30000);
  double dist = (dur * 0.0343) / 2.0;
  return (dist <= maxDist) ? dist : maxDist;
}

// Map helper (S. Shakoor)
double mapDouble(double x, double a, double b, double c, double d) {
  return (x - a)*(d - c)/(b - a) + c;
}

// Write one point to SD (by Sahil Shakoor)
void writePoint(File &f, double x, double y, double z) {
  f.print(x,3); f.print(' ');
  f.print(y,3); f.print(' ');
  f.println(z,3);
}

// --------------------------------------------------------------------------------
// Scan a single layer (Authored by Sahil Shakoor)
// --------------------------------------------------------------------------------
void scanLayer(int stepPin, bool useIR,
               int trigPin, int echoPin,
               const char* fname) {
  File f = SD.open(fname, FILE_WRITE);
  if (!f) {
    Serial.print("Error opening "); Serial.println(fname);
    return;
  }
  if (layerCount == 0) f.println("# x y z");
  f.close();

  bool allMax = true;
  Serial.print("Scanning "); Serial.println(fname);
  for (int i = 0; i < thetaCounts; i++) {
    rotateMotor(stepPin, 1);  // rotate step
    delay(50);
    double d = useIR ? readIRMedian() : readUltrasonic(trigPin, echoPin);
    float ang = i * stepAngle;
    double x = d * sin(ang);
    double y = d * cos(ang);
    double z = layerCount * zSpacing;
    f = SD.open(fname, FILE_WRITE);
    writePoint(f, x, y, z);
    f.close();
    if (d < (maxDist - tol)) allMax = false;
  }

  if (!allMax) {
    digitalWrite(zDir, LOW);  // lift Z up
    rotateMotor(zStep, noZSteps);
    delay(500);
    layerCount++;
  } else {
    Serial.println("Layer all max â†’ stopping scan.");
  }
}

// --------------------------------------------------------------------------------
// Initialization routine (by Sahil Shakoor)
// --------------------------------------------------------------------------------
void initializeMotors() {
  Serial.println("Initialization: lifting Z 10cm...");
  digitalWrite(zDir, LOW);
  rotateMotorFast(zStep, initZSteps);

  Serial.println("Returning Z to home at high speed...");
  digitalWrite(zDir, HIGH);
  rotateMotorFast(zStep, initZSteps);

  Serial.println("Spinning turntable one full rev at high speed...");
  digitalWrite(tDir, LOW);
  rotateMotorFast(tStep, thetaCounts);

  Serial.println("Initialization complete. Beginning scan.");
}

// --------------------------------------------------------------------------------
// setup() and loop() (Authored by Sahil Shakoor)
// --------------------------------------------------------------------------------
void setup() {
  Serial.begin(9600);

  int pins[] = { tStep, tDir, tMS1, tMS2, tEn,
                 zStep, zDir, zMS1, zMS2, zEn,
                 u1Step, u1Dir, u1MS1, u1MS2, u1En,
                 u2Step, u2Dir, u2MS1, u2MS2, u2En,
                 u1Trig, u1Echo, u2Trig, u2Echo };
  for (auto p : pins) pinMode(p, OUTPUT);
  pinMode(u1Echo, INPUT);
  pinMode(u2Echo, INPUT);

  digitalWrite(tMS1, LOW); digitalWrite(tMS2, LOW);
  digitalWrite(zMS1, LOW); digitalWrite(zMS2, LOW);
  digitalWrite(u1MS1, LOW); digitalWrite(u1MS2, LOW);
  digitalWrite(u2MS1, LOW); digitalWrite(u2MS2, LOW);

  for (int e : { tEn, zEn, u1En, u2En }) digitalWrite(e, LOW);

  Serial.print("Initializing SD...");
  if (!SD.begin(csPin)) {
    Serial.println(" failed"); while (1);
  }
  Serial.println(" OK");

  initializeMotors();  // Sahil Shakoor initialization
}

void loop() {
  scanLayer(tStep, true,  0,  0, "SC00I.txt");
  scanLayer(u1Step,false,u1Trig,u1Echo,"SC00U1.txt");
  scanLayer(u2Step,false,u2Trig,u2Echo,"SC00U2.txt");

  Serial.println("Returning Z home...");
  digitalWrite(zDir, HIGH);
  for (int i = 0; i < layerCount; i++) {
    rotateMotor(zStep, noZSteps);
    delay(10);
  }
  Serial.println("Scan cycle complete. Halting.");
  while(1) delay(1000);
}
